---
// Modal.astro - Componente modal reutilizable
---

<!-- Modal Overlay -->
<div id="modal-overlay" class="fixed top-0 left-0 w-screen h-screen bg-black/70 justify-center items-center z-[9999] pointer-events-auto hidden">
  <div class="bg-white/85 rounded-xl max-w-[90%] max-h-[90%] w-[600px] overflow-hidden shadow-[0_20px_40px_rgba(0,0,0,0.3)]">

    <div class="modal-header relative text-white p-3 flex justify-between items-center bg-gray-400">
      <h2 id="modal-title" class="m-0 text-xl lg:text-2xl font-semibold">Título</h2>
      <button id="close-modal" class="absolute top-0 right-0  bg-transparent border-none text-white text-3xl cursor-pointer p-0 w-12 h-12 flex items-center justify-center rounded-full transition-colors duration-300 hover:text-gray-900">&times;</button>
    </div>

    <div class="modal-body p-4 max-h-[70vh] overflow-y-auto overflow-x-hidden">
      <div id="modal-text"></div>
    </div>

  </div>
</div>

<style>
  @reference "tailwindcss";
  
 
  

  /* Webkit overflow scrolling para mejor experiencia en móviles */
  .modal-body {
    -webkit-overflow-scrolling: touch;
  }

  /* Estilos del contenido del modal usando Tailwind en :global() */
  :global(.modal-body h3) {
    @apply text-gray-800 mt-6 mb-4 text-lg font-semibold;
  }

  :global(.modal-body h4) {
    @apply text-gray-600 mt-4 mb-2 text-[16px] font-semibold;
  }

  :global(.modal-body p) {
    @apply text-gray-600 leading-relaxed text-sm mb-4;
  }

  :global(.modal-body ul) {
    @apply text-gray-600 leading-relaxed mb-4 pl-6;
  }

  :global(.modal-body li) {
    @apply mb-2;
  }

  :global(.modal-body strong) {
    @apply text-gray-800 font-semibold;
  }

  :global(.modal-body a) {
    @apply text-blue-500 no-underline hover:underline;
  }
</style>

<script>
  // Función para abrir modal con contenido dinámico
  function openModal(title, content) {
    // console.log('Abriendo modal:', title);
    const modalOverlay = document.getElementById('modal-overlay');
    const modalTitle = document.getElementById('modal-title');
    const modalText = document.getElementById('modal-text');
    
    if (modalOverlay && modalTitle && modalText) {
      modalTitle.textContent = title;
      modalText.innerHTML = content;
      modalOverlay.classList.remove('hidden');
      modalOverlay.classList.add('flex');
      
      // Bloquear scroll del body
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      document.body.style.width = '100%';
      
      // console.log('Modal abierto exitosamente');
    } else {
      console.error('Elementos del modal no encontrados');
    }
  }

  // Función para cerrar modal
  function closeModal() {
    // console.log('Cerrando modal');
    const modalOverlay = document.getElementById('modal-overlay');
    if (modalOverlay) {
      modalOverlay.classList.add('hidden');
      modalOverlay.classList.remove('flex');
      
      // Restaurar scroll del body
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.width = '';
    }
  }

  // Hacer funciones globales
  window['openModal'] = openModal;
  window['closeModal'] = closeModal;

  document.addEventListener('DOMContentLoaded', () => {
    // console.log('Modal script iniciado');
    
    const modalOverlay = document.getElementById('modal-overlay');
    const closeModalBtn = document.getElementById('close-modal');

    // Event listener para botón cerrar
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
      });
      // console.log('Event listener añadido a Close button');
    }

    // Cerrar modal al hacer clic en el overlay
    if (modalOverlay) {
      modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
          closeModal();
        }
      });
      // console.log('Event listener añadido a Modal overlay');
    }

    // Cerrar modal con tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modalOverlay && !modalOverlay.classList.contains('hidden')) {
        closeModal();
      }
    });
    // console.log('Event listener añadido para tecla Escape');
    // console.log('Modal configurado correctamente');
  });
</script>